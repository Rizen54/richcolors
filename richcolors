#!/usr/bin/env python3

import argparse
import re

import PIL.ImageDraw as ImageDraw
import PIL.Image as Image


def parse_hex_codes(filename):
    """Parses a text file for hex color codes.

    Args:
        filename: The name of the input file.

    Returns:
        A list of hex color codes found in the file.
    """

    hex_code_pattern = r"#[0-9a-fA-F]{6}"
    hex_codes = []

    try:
        with open(filename, "r") as f:
            for line in f:
                matches = re.findall(hex_code_pattern, line)
                hex_codes.extend(matches)
    except FileNotFoundError:
        print(f"Error: File '{filename}' not found.")
    except Exception as e:
        print(f"Error parsing file: {e}")

    return hex_codes


def visualize_palette(hex_codes, image_width, image_height, outline_width=5, num_columns=5, background_color="#0c0f1c", border_color="#0c0f1c", padding=5):
    """Visualizes a color palette from hex codes.

    Args:
        hex_codes: A list of hex color codes.
        rect_width: Width of each rectangle.
        rect_height: Height of each rectangle.
        num_columns: Maximum number of columns in the table. -> THIS DOESNT WORK BUT DONT TOUCH IT CUZ IDK HOW IT WORKS.
        background_color: Background color of the image.
        border_color: Border color of the rectangles.
        padding: Padding around the rectangle group.
        outline_width: Width of the rectangle outline.

    Returns:
        The created image.
    """

    num_colors = len(hex_codes)

    # Calculate the number of rows and columns needed
    # DO NOT TOUCH THIS

    num_columns = min(num_colors, num_columns)
    unfinished_row = 0

    if (num_colors % num_columns) != 0:
        unfinished_row = 1

    num_rows = ((num_colors // num_columns) + unfinished_row)
    print(num_rows)

    # Calculate the rect dimensions based on the image dimensions, spacing, and padding
    # rect_width = ((image_width - 2*padding + outline_width) - num_columns*outline_width) / num_columns
    # rect_height = ((image_height - 2*padding + outline_width) - num_rows*outline_width) / num_rows
    rect_width = ((image_width + padding + outline_width) - num_columns*outline_width) / num_columns
    rect_height = ((image_height + padding + outline_width) - num_rows*outline_width) / num_rows
    #rect_width = ((image_width) - num_columns*outline_width) / num_columns
    #rect_height = ((image_height) - num_rows*outline_width) / num_rows
    print(rect_width)
    print(rect_height)

    img = Image.new('RGB', (image_width, image_height), background_color)  # Set background color
    draw = ImageDraw.Draw(img)

    # Draw the padding rectangle
    draw.rectangle([(0, 0), (image_width+padding, image_height+padding)], outline=border_color)

    x, y = padding, padding  # Start drawing rectangles inside the padding
    for hex_code in hex_codes:
        # Remove '#' if present
        hex_code = hex_code.lstrip('#')

        color = tuple(int(hex_code[i:i+2], 16) for i in (0, 2, 4))

        # Draw the rectangle with a border of specified width
        draw.rectangle([(x, y), (x + rect_width, y + rect_height)], fill=color, outline=border_color, width=outline_width)
        x += rect_width

        if x + rect_width >= image_width - padding:
            x = padding
            y += rect_height

    return img


def main():
    parser = argparse.ArgumentParser(description="Visualize a color palette from hex codes.")
    parser.add_argument("hex_codes_file", help="Path to the file containing hex codes.")
    parser.add_argument("image_name", help="Name of the output image file.")
    args = parser.parse_args()

    hex_codes = parse_hex_codes(args.hex_codes_file)

    if hex_codes:
        image_width = int(input("Enter image width: "))
        image_height = int(input("Enter image height: "))
        # outline_width = int(input("Enter spacing: "))
        # cols = int(input("Enter number of columns: "))

        outline_width = 5
        cols = 5

        img = visualize_palette(hex_codes, image_width, image_height, outline_width, cols)

        img.save(args.image_name)
        print("Image saved as", args.image_name)
    else:
        print("No hex codes found in the file.")


if __name__ == "__main__":
    main()
